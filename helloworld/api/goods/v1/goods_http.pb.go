// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v3.19.4
// source: goods.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationGoodsAddGoods = "/goods.v1.Goods/AddGoods"

type GoodsHTTPServer interface {
	AddGoods(context.Context, *AddGoodsRequest) (*AddGoodsResponse, error)
}

func RegisterGoodsHTTPServer(s *http.Server, srv GoodsHTTPServer) {
	r := s.Route("/")
	r.POST("/goods/", _Goods_AddGoods0_HTTP_Handler(srv))
}

func _Goods_AddGoods0_HTTP_Handler(srv GoodsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddGoodsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGoodsAddGoods)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddGoods(ctx, req.(*AddGoodsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddGoodsResponse)
		return ctx.Result(200, reply)
	}
}

type GoodsHTTPClient interface {
	AddGoods(ctx context.Context, req *AddGoodsRequest, opts ...http.CallOption) (rsp *AddGoodsResponse, err error)
}

type GoodsHTTPClientImpl struct {
	cc *http.Client
}

func NewGoodsHTTPClient(client *http.Client) GoodsHTTPClient {
	return &GoodsHTTPClientImpl{client}
}

func (c *GoodsHTTPClientImpl) AddGoods(ctx context.Context, in *AddGoodsRequest, opts ...http.CallOption) (*AddGoodsResponse, error) {
	var out AddGoodsResponse
	pattern := "/goods/"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGoodsAddGoods))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
